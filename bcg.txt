var config = {
  baseBet: { label: "Apuesta base", value: 0.2, type: "number" },
  stopLoss: { label: "Stop Loss", value: 100, type: "number" },
  takeProfit: { label: "Take Profit", value: 200, type: "number" },
  
  // Nuevo: configuraci√≥n de Kelly Criterion modificado
  kellyFraction: { label: "Fracci√≥n de Kelly", value: 0.25, type: "number" },
  
  // Configuraci√≥n para estrategia de valor esperado positivo
  targetMultipliers: [
    { multiplier: 1.5, probability: 0.67, enabled: true },
    { multiplier: 2, probability: 0.5, enabled: true },
    { multiplier: 3, probability: 0.33, enabled: false },
    { multiplier: 5, probability: 0.2, enabled: false },
    { multiplier: 10, probability: 0.1, enabled: false }
  ],
  
  // Nueva configuraci√≥n para gesti√≥n de capital
  capitalManagement: { label: "% de capital por apuesta", value: 1, type: "number" },
  
  // An√°lisis de tendencias
  trendAnalysis: { label: "Usar an√°lisis de tendencias", value: true, type: "checkbox" },
  trendWindowSize: { label: "Tama√±o ventana de an√°lisis", value: 10, type: "number" }
};

function main() {
  var startBal = currency.amount;
  var profit = 0;
  var wins = 0;
  var losses = 0;
  var streakCounter = 0;
  var isBetWon = false;
  var gameHistory = [];
  
  function makeBet() {
    // Actualizar estad√≠sticas
    profit = currency.amount - startBal;
    
    // Verificar l√≠mites
    if (profit <= -config.stopLoss.value) {
      log.error("‚õî Stop Loss alcanzado: " + profit.toFixed(2));
      game.stop();
      return;
    }
    
    if (profit >= config.takeProfit.value) {
      log.success("üéâ Take Profit alcanzado: " + profit.toFixed(2));
      game.stop();
      return;
    }
    
    // Analizar historial si est√° habilitado
    var targetPayout = selectOptimalMultiplier();
    
    // Calcular tama√±o de apuesta usando principio de Kelly modificado
    var betAmount = calculateBetSize(targetPayout);
    
    // Asegurarse de que la apuesta es al menos la m√≠nima permitida
    betAmount = Math.max(betAmount, currency.minAmount);
    
    log.info("üìä Apostando " + betAmount.toFixed(4) + " a " + targetPayout.toFixed(2) + "x (EV+: " + 
             calculateExpectedValue(targetPayout, getProbabilityEstimate(targetPayout)).toFixed(4) + ")");
    
    game.bet(betAmount, targetPayout)
      .then(function(payout) {
        if (payout > 1) {
          // Ganamos
          var winAmount = betAmount * payout - betAmount;
          wins++;
          streakCounter = (streakCounter > 0) ? streakCounter + 1 : 1;
          isBetWon = true;
          log.success("‚úÖ Ganamos " + winAmount.toFixed(2) + " con multiplicador " + targetPayout + "x");
        } else {
          // Perdimos
          losses++;
          streakCounter = (streakCounter < 0) ? streakCounter - 1 : -1;
          isBetWon = false;
          log.error("‚ùå Perdimos " + betAmount.toFixed(2) + " con multiplicador " + targetPayout + "x");
        }
        
        // Registrar historial
        if (game.history && game.history.length > 0) {
          var crashPoint = game.history[0].crashPoint;
          gameHistory.unshift(crashPoint); // Agregar al inicio del array
          
          // Mantener historial al tama√±o de la ventana
          if (gameHistory.length > config.trendWindowSize.value) {
            gameHistory.pop();
          }
          
          log.info("üí• Crash en: " + crashPoint + "x | Balance: " + currency.amount.toFixed(2) + 
                   " | P/G: " + profit.toFixed(2) + " | Racha: " + streakCounter);
        }
      })
      .catch(function(error) {
        log.error("‚ö†Ô∏è Error en la apuesta: " + error);
      });
  }
  
  // Analizar historial para seleccionar multiplicador √≥ptimo
  function selectOptimalMultiplier() {
    // Si no hay suficientes datos o an√°lisis desactivado, elegir uno al azar
    if (!config.trendAnalysis.value || gameHistory.length < 5) {
      return selectRandomMultiplier();
    }
    
    // Calcular distribuci√≥n reciente de multiplicadores
    var belowThresholds = config.targetMultipliers.map(function(item) {
      return countBelowThreshold(item.multiplier);
    });
    
    // Calcular valor esperado para cada multiplicador
    var expectedValues = config.targetMultipliers.map(function(item, index) {
      // Probabilidad ajustada seg√∫n historial reciente
      var adjustedProb = (gameHistory.length > 0) ? 
                         (gameHistory.length - belowThresholds[index]) / gameHistory.length : 
                         item.probability;
      
      return {
        multiplier: item.multiplier,
        ev: (item.multiplier - 1) * adjustedProb - (1 - adjustedProb),
        enabled: item.enabled
      };
    });
    
    // Filtrar solo los habilitados
    var enabledValues = expectedValues.filter(function(item) {
      return item.enabled;
    });
    
    // Ordenar por valor esperado y elegir el mejor
    enabledValues.sort(function(a, b) {
      return b.ev - a.ev;
    });
    
    // Si hay un multiplicador con EV positivo, usarlo
    if (enabledValues.length > 0 && enabledValues[0].ev > 0) {
      return enabledValues[0].multiplier;
    }
    
    // Si no hay ninguno positivo, elegir el menos negativo
    return enabledValues[0].multiplier;
  }
  
  // Contar cu√°ntos valores en el historial est√°n por debajo del umbral
  function countBelowThreshold(threshold) {
    return gameHistory.filter(function(value) {
      return value < threshold;
    }).length;
  }
  
  // Seleccionar multiplicador aleatorio de los habilitados
  function selectRandomMultiplier() {
    var enabledMultipliers = config.targetMultipliers.filter(function(item) {
      return item.enabled;
    });
    
    if (enabledMultipliers.length === 0) {
      return 1.5; // Valor por defecto
    }
    
    var randomIndex = Math.floor(Math.random() * enabledMultipliers.length);
    return enabledMultipliers[randomIndex].multiplier;
  }
  
  // Calcular tama√±o de apuesta √≥ptimo usando principio de Kelly modificado
  function calculateBetSize(targetMultiplier) {
    var p = getProbabilityEstimate(targetMultiplier);
    var q = 1 - p;
    var b = targetMultiplier - 1; // Ganancia neta en caso de √©xito
    
    // F√≥rmula de Kelly: f* = (p*b - q)/b
    var kellyFraction = (p * b - q) / b;
    
    // Aplicar fracci√≥n de Kelly para ser m√°s conservador
    kellyFraction = kellyFraction * config.kellyFraction.value;
    
    // Limitar a valor positivo
    kellyFraction = Math.max(0, kellyFraction);
    
    // Si Kelly es cercano a cero, usar m√≠nimo configurable
    if (kellyFraction < 0.001) {
      return (config.capitalManagement.value / 100) * currency.amount;
    }
    
    // Calcular apuesta basada en balance actual
    return kellyFraction * currency.amount;
  }
  
  // Estimar probabilidad basada en multiplicador y datos hist√≥ricos
  function getProbabilityEstimate(multiplier) {
    // Probabilidad te√≥rica aproximada (house edge t√≠pico de 5%)
    var theoreticalProb = 0.95 / multiplier;
    
    // Si no hay datos hist√≥ricos, usar te√≥rica
    if (gameHistory.length < 5) {
      return theoreticalProb;
    }
    
    // Calcular probabilidad emp√≠rica
    var successCount = gameHistory.filter(function(crashPoint) {
      return crashPoint >= multiplier;
    }).length;
    
    var empiricalProb = successCount / gameHistory.length;
    
    // Combinar probabilidad te√≥rica y emp√≠rica dando m√°s peso a la emp√≠rica
    // a medida que tengamos m√°s datos
    var weight = Math.min(0.7, gameHistory.length / 20); // M√°ximo 70% de peso a los datos emp√≠ricos
    return (1 - weight) * theoreticalProb + weight * empiricalProb;
  }
  
  // Calcular valor esperado de una apuesta
  function calculateExpectedValue(multiplier, probability) {
    // EV = p*ganancia - (1-p)*p√©rdida
    return probability * (multiplier - 1) - (1 - probability);
  }
  
  // Gesti√≥n de racha (martingala modificada con l√≠mites)
  function adjustBetForStreak(baseBet) {
    if (streakCounter <= 0) {
      // Estamos en racha perdedora
      return baseBet;
    } else if (streakCounter >= 3) {
      // Despu√©s de varias ganancias, reducir la apuesta
      return baseBet * 0.8;
    }
    return baseBet;
  }
  
  // Iniciar ciclo de apuestas
  game.onBet = function() {
    // Peque√±o retardo para asegurar que todo est√° listo
    setTimeout(makeBet, 150);
  };
  
  log.info("üöÄ Estrategia matem√°tica EV+ iniciada | Balance: " + startBal.toFixed(2));
  log.info("‚öôÔ∏è Configurado con fracci√≥n de Kelly: " + config.kellyFraction.value + 
           " | An√°lisis de tendencias: " + (config.trendAnalysis.value ? "Activado" : "Desactivado"));
}
