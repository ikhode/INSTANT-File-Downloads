var config = {
  // Configuraci√≥n general
  generalTitle: { label: "üéÆ Configuraci√≥n General", type: "title" },
  baseBet: { label: "Apuesta base", value: 0.2, type: "number" },
  maxBankroll: { label: "Porcentaje m√°ximo de bankroll a arriesgar por sesi√≥n", value: 20, type: "number" },
  
  // Configuraci√≥n de multiplicadores bajos (seguros)
  lowTitle: { label: "üü¢ Estrategia para multiplicadores bajos (seguros)", type: "title" },
  useLowStrategy: { label: "Activar estrategia de multiplicadores bajos", value: true, type: "checkbox" },
  lowTarget: { label: "Multiplicador objetivo", value: 1.5, type: "number" },
  lowBetSize: { label: "% de apuesta base", value: 100, type: "number" },
  
  // Configuraci√≥n de multiplicadores medios
  mediumTitle: { label: "üü° Estrategia para multiplicadores medios", type: "title" },
  useMediumStrategy: { label: "Activar estrategia de multiplicadores medios", value: true, type: "checkbox" },
  mediumTarget: { label: "Multiplicador objetivo", value: 5, type: "number" },
  mediumBetSize: { label: "% de apuesta base", value: 25, type: "number" },
  
  // Configuraci√≥n de multiplicadores altos
  highTitle: { label: "üü† Estrategia para multiplicadores altos", type: "title" },
  useHighStrategy: { label: "Activar estrategia de multiplicadores altos", value: true, type: "checkbox" },
  highTarget: { label: "Multiplicador objetivo", value: 50, type: "number" },
  highBetSize: { label: "% de apuesta base", value: 10, type: "number" },
  
  // Configuraci√≥n de multiplicadores muy altos
  veryHighTitle: { label: "üî¥ Estrategia para multiplicadores muy altos", type: "title" },
  useVeryHighStrategy: { label: "Activar estrategia de multiplicadores muy altos", value: true, type: "checkbox" },
  veryHighTarget: { label: "Multiplicador objetivo", value: 100, type: "number" },
  veryHighBetSize: { label: "% de apuesta base", value: 5, type: "number" },
  
  // Configuraci√≥n de multiplicadores extremos
  extremeTitle: { label: "‚ö° Estrategia para multiplicadores extremos", type: "title" },
  useExtremeStrategy: { label: "Activar estrategia de multiplicadores extremos", value: true, type: "checkbox" },
  extremeTarget: { label: "Multiplicador objetivo", value: 300, type: "number" },
  extremeBetSize: { label: "% de apuesta base", value: 2, type: "number" },
  
  // Gesti√≥n de riesgo y ganancias
  riskTitle: { label: "‚ö†Ô∏è Gesti√≥n de riesgo", type: "title" },
  stopLoss: { label: "Detener despu√©s de p√©rdida de (unidades)", value: 100, type: "number" },
  takeProfit: { label: "Detener despu√©s de ganancia de (unidades)", value: 200, type: "number" },
  
  // An√°lisis de patrones
  analyticTitle: { label: "üìä An√°lisis de patrones", type: "title" },
  analyzeHistory: { label: "Analizar historial para optimizar apuestas", value: true, type: "checkbox" },
  historySize: { label: "N√∫mero de rondas a analizar", value: 20, type: "number" },
  
  // Configuraci√≥n avanzada
  advancedTitle: { label: "üîß Configuraci√≥n avanzada", type: "title" },
  adaptiveBetting: { label: "Ajuste adaptativo de apuestas", value: true, type: "checkbox" },
  betDelayMs: { label: "Retardo entre apuestas (ms)", value: 200, type: "number" },
};

function main() {
  // Variables para seguimiento
  var startBalance = currency.amount;
  var currentBalance = startBalance;
  var sessionProfit = 0;
  var totalBets = 0;
  var totalWins = 0;
  var totalLosses = 0;
  var biggestWin = 0;
  var consecutiveWins = 0;
  var consecutiveLosses = 0;
  var gameHistoryData = [];
  var strategyPerformance = {
    low: { wins: 0, losses: 0, profit: 0 },
    medium: { wins: 0, losses: 0, profit: 0 },
    high: { wins: 0, losses: 0, profit: 0 },
    veryHigh: { wins: 0, losses: 0, profit: 0 },
    extreme: { wins: 0, losses: 0, profit: 0 }
  };
  
  // Funci√≥n para analizar el historial y detectar patrones
  function analyzeHistory() {
    if (!config.analyzeHistory.value || gameHistoryData.length < 5) return {};
    
    var recentHistory = gameHistoryData.slice(-config.historySize.value);
    var analysis = {
      averageCrash: 0,
      lowFrequency: 0,
      mediumFrequency: 0,
      highFrequency: 0,
      veryHighFrequency: 0,
      extremeFrequency: 0,
      pattern: "normal"
    };
    
    // Calcular estad√≠sticas
    var sum = 0;
    recentHistory.forEach(function(crash) {
      sum += crash;
      if (crash < 2) analysis.lowFrequency++;
      else if (crash < 10) analysis.mediumFrequency++;
      else if (crash < 50) analysis.highFrequency++;
      else if (crash < 100) analysis.veryHighFrequency++;
      else analysis.extremeFrequency++;
    });
    
    analysis.averageCrash = sum / recentHistory.length;
    
    // Detectar patrones
    if (analysis.lowFrequency > recentHistory.length * 0.7) {
      analysis.pattern = "low_streak";
    } else if (analysis.highFrequency + analysis.veryHighFrequency + analysis.extremeFrequency > recentHistory.length * 0.3) {
      analysis.pattern = "high_opportunity";
    }
    
    log.info("üìä An√°lisis: Media de crash " + analysis.averageCrash.toFixed(2) + "x | Patr√≥n: " + analysis.pattern);
    return analysis;
  }
  
  // Funci√≥n para determinar el tama√±o √≥ptimo de las apuestas
  function optimizeBetSizes(analysis) {
    if (!config.adaptiveBetting.value) return;
    
    var adjustments = {
      low: 1,
      medium: 1,
      high: 1,
      veryHigh: 1,
      extreme: 1
    };
    
    // Ajustar seg√∫n patrones detectados
    if (analysis.pattern === "low_streak") {
      adjustments.low = 1.5;
      adjustments.medium = 0.7;
      adjustments.high = 0.5;
      adjustments.veryHigh = 0.3;
      adjustments.extreme = 0.2;
    } else if (analysis.pattern === "high_opportunity") {
      adjustments.low = 0.5;
      adjustments.medium = 0.8;
      adjustments.high = 1.2;
      adjustments.veryHigh = 1.5;
      adjustments.extreme = 2;
    }
    
    return adjustments;
  }
  
  // Funci√≥n para calcular el rendimiento de cada estrategia
  function calculateStrategyROI() {
    var results = {};
    
    for (var strategy in strategyPerformance) {
      var data = strategyPerformance[strategy];
      var totalBets = data.wins + data.losses;
      var winRate = totalBets > 0 ? (data.wins / totalBets) * 100 : 0;
      var roi = totalBets > 0 ? (data.profit / totalBets) : 0;
      
      results[strategy] = {
        totalBets: totalBets,
        winRate: winRate,
        roi: roi
      };
    }
    
    return results;
  }
  
  // Funci√≥n para mostrar estad√≠sticas
  function showStats() {
    sessionProfit = currency.amount - startBalance;
    var profitPercentage = (sessionProfit / startBalance) * 100;
    var winRate = totalBets > 0 ? (totalWins / totalBets) * 100 : 0;
    
    log.info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    log.info("üìà ESTAD√çSTICAS DE LA SESI√ìN");
    log.info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    log.info("üí∞ Balance: " + currency.amount.toFixed(2) + " " + currency.currencyName);
    
    if (sessionProfit > 0) {
      log.success("‚úÖ Ganancia: +" + sessionProfit.toFixed(2) + " (" + profitPercentage.toFixed(2) + "%)");
    } else {
      log.error("‚ùå Ganancia: " + sessionProfit.toFixed(2) + " (" + profitPercentage.toFixed(2) + "%)");
    }
    
    log.info("üé≤ Apuestas totales: " + totalBets);
    log.info("üèÜ Tasa de victoria: " + winRate.toFixed(2) + "%");
    log.info("üîÑ Racha actual: " + (consecutiveWins > 0 ? "+" + consecutiveWins + " victorias" : "-" + consecutiveLosses + " derrotas"));
    log.info("üíé Mayor ganancia: " + biggestWin.toFixed(2));
    
    // Mostrar rendimiento por estrategia
    var roi = calculateStrategyROI();
    log.info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    log.info("üìä RENDIMIENTO POR ESTRATEGIA");
    log.info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    
    for (var strategy in roi) {
      var data = roi[strategy];
      if (data.totalBets > 0) {
        var strategyName = "";
        switch (strategy) {
          case "low": strategyName = "üü¢ Bajo"; break;
          case "medium": strategyName = "üü° Medio"; break;
          case "high": strategyName = "üü† Alto"; break;
          case "veryHigh": strategyName = "üî¥ Muy Alto"; break;
          case "extreme": strategyName = "‚ö° Extremo"; break;
        }
        
        log.info(strategyName + ": " + data.totalBets + " apuestas, " + data.winRate.toFixed(2) + "% aciertos, ROI: " + data.roi.toFixed(2));
      }
    }
  }
  
  // Funci√≥n para verificar l√≠mites de stop loss y take profit
  function checkLimits() {
    sessionProfit = currency.amount - startBalance;
    
    if (sessionProfit <= -config.stopLoss.value) {
      log.error("üõë Se alcanz√≥ el l√≠mite de p√©rdida. Deteniendo el script.");
      showStats();
      game.stop();
      return true;
    }
    
    if (sessionProfit >= config.takeProfit.value) {
      log.success("üéâ ¬°Se alcanz√≥ el objetivo de ganancia! Deteniendo el script.");
      showStats();
      game.stop();
      return true;
    }
    
    return false;
  }
  
  // Funci√≥n principal para realizar apuestas
  function placeBets() {
    // Verificar l√≠mites primero
    if (checkLimits()) return;
    
    // Actualizar balance actual
    currentBalance = currency.amount;
    
    // Analizar el historial
    var analysis = analyzeHistory();
    var betAdjustments = optimizeBetSizes(analysis);
    
    // Preparar las apuestas para esta ronda
    var bets = [];
    
    // Apuesta para multiplicadores bajos
    if (config.useLowStrategy.value) {
      var lowBetAmount = (config.baseBet.value * config.lowBetSize.value / 100);
      if (betAdjustments) lowBetAmount *= betAdjustments.low;
      lowBetAmount = Math.max(lowBetAmount, currency.minAmount);
      
      bets.push({
        amount: lowBetAmount,
        payout: config.lowTarget.value,
        type: "low"
      });
    }
    
    // Apuesta para multiplicadores medios
    if (config.useMediumStrategy.value) {
      var mediumBetAmount = (config.baseBet.value * config.mediumBetSize.value / 100);
      if (betAdjustments) mediumBetAmount *= betAdjustments.medium;
      mediumBetAmount = Math.max(mediumBetAmount, currency.minAmount);
      
      bets.push({
        amount: mediumBetAmount,
        payout: config.mediumTarget.value,
        type: "medium"
      });
    }
    
    // Apuesta para multiplicadores altos
    if (config.useHighStrategy.value) {
      var highBetAmount = (config.baseBet.value * config.highBetSize.value / 100);
      if (betAdjustments) highBetAmount *= betAdjustments.high;
      highBetAmount = Math.max(highBetAmount, currency.minAmount);
      
      bets.push({
        amount: highBetAmount,
        payout: config.highTarget.value,
        type: "high"
      });
    }
    
    // Apuesta para multiplicadores muy altos
    if (config.useVeryHighStrategy.value) {
      var veryHighBetAmount = (config.baseBet.value * config.veryHighBetSize.value / 100);
      if (betAdjustments) veryHighBetAmount *= betAdjustments.veryHigh;
      veryHighBetAmount = Math.max(veryHighBetAmount, currency.minAmount);
      
      bets.push({
        amount: veryHighBetAmount,
        payout: config.veryHighTarget.value,
        type: "veryHigh"
      });
    }
    
    // Apuesta para multiplicadores extremos
    if (config.useExtremeStrategy.value) {
      var extremeBetAmount = (config.baseBet.value * config.extremeBetSize.value / 100);
      if (betAdjustments) extremeBetAmount *= betAdjustments.extreme;
      extremeBetAmount = Math.max(extremeBetAmount, currency.minAmount);
      
      bets.push({
        amount: extremeBetAmount,
        payout: config.extremeTarget.value,
        type: "extreme"
      });
    }
    
    // Verificar que tenemos suficiente saldo para las apuestas
    var totalBetAmount = bets.reduce(function(sum, bet) {
      return sum + bet.amount;
    }, 0);
    
    if (totalBetAmount > currency.amount) {
      log.error("‚ö†Ô∏è No hay suficiente saldo para realizar todas las apuestas. Reduciendo proporcionalmente.");
      var reductionFactor = currency.amount / totalBetAmount * 0.95; // 5% buffer
      
      bets.forEach(function(bet) {
        bet.amount *= reductionFactor;
        bet.amount = Math.max(bet.amount, currency.minAmount);
      });
    }
    
    // Realizar las apuestas
    var betPromises = [];
    bets.forEach(function(bet) {
      log.info("üéØ Apostando " + bet.amount.toFixed(2) + " " + currency.currencyName + " a " + bet.payout + "x");
      betPromises.push(
        game.bet(bet.amount, bet.payout).then(function(payout) {
          // Procesar resultado de la apuesta
          totalBets++;
          
          if (payout > 1) {
            // Ganamos
            var winAmount = bet.amount * payout - bet.amount;
            strategyPerformance[bet.type].wins++;
            strategyPerformance[bet.type].profit += winAmount;
            totalWins++;
            consecutiveWins++;
            consecutiveLosses = 0;
            
            if (winAmount > biggestWin) {
              biggestWin = winAmount;
            }
            
            log.success("‚úÖ ¬°Victoria! +" + winAmount.toFixed(2) + " con multiplicador " + bet.payout + "x");
          } else {
            // Perdimos
            strategyPerformance[bet.type].losses++;
            strategyPerformance[bet.type].profit -= bet.amount;
            totalLosses++;
            consecutiveLosses++;
            consecutiveWins = 0;
            
            log.error("‚ùå P√©rdida de " + bet.amount.toFixed(2) + " con multiplicador " + bet.payout + "x");
          }
          
          return payout;
        }).catch(function(error) {
          log.error("‚ö†Ô∏è Error en la apuesta: " + error.message);
        })
      );
    });
    
    // Esperar a que todas las apuestas se completen
    Promise.all(betPromises).then(function() {
      // Registrar multiplicador de crash
      if (game.history && game.history.length > 0) {
        var crashPoint = game.history[0].crashPoint;
        gameHistoryData.push(crashPoint);
        log.info("üí• Crash en: " + crashPoint + "x");
      }
      
      // Mostrar estad√≠sticas cada 5 rondas
      if (totalBets % 5 === 0) {
        showStats();
      }
    }).catch(function(error) {
      log.error("‚ö†Ô∏è Error general: " + error.message);
    });
  }
  
  // Iniciar el ciclo de apuestas
  game.onBet = function() {
    // Peque√±o retraso para asegurar que todo est√° listo
    setTimeout(function() {
      placeBets();
    }, config.betDelayMs.value);
  };
  
  // Mensaje de inicio
  log.info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  log.info("üöÄ ESTRATEGIA MULTI-MULTIPLICADOR INICIADA");
  log.info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
  log.info("üí∞ Balance inicial: " + startBalance.toFixed(2) + " " + currency.currencyName);
  log.info("‚öôÔ∏è Configuraci√≥n cargada con " + 
           (config.useLowStrategy.value ? "‚úÖ" : "‚ùå") + " Bajo (" + config.lowTarget.value + "x), " +
           (config.useMediumStrategy.value ? "‚úÖ" : "‚ùå") + " Medio (" + config.mediumTarget.value + "x), " +
           (config.useHighStrategy.value ? "‚úÖ" : "‚ùå") + " Alto (" + config.highTarget.value + "x), " +
           (config.useVeryHighStrategy.value ? "‚úÖ" : "‚ùå") + " Muy Alto (" + config.veryHighTarget.value + "x), " +
           (config.useExtremeStrategy.value ? "‚úÖ" : "‚ùå") + " Extremo (" + config.extremeTarget.value + "x)");
  log.info("üõ°Ô∏è Stop Loss: " + config.stopLoss.value + " | Take Profit: " + config.takeProfit.value);
  log.info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
}
